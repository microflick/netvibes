<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:widget="http://www.netvibes.com/ns/">
    <head>
        <!-- Application Metas -->
        <title>Text Util</title>
        <meta name="author" content="Arul Rajendiran (IXK)" />
        <meta name="apiVersion" content="1.3" />
        <meta name="debugMode" content="false" />
        <meta name="strictMode" content="true" />
        <meta name="description" content="A simple regex tester" />
        <meta name="keywords" content="regex" />
        <meta name="version" content="1.0" />
        <meta name="inline" content="true" />

        <!-- Application Icons -->
        <!-- <link rel="icon" type="image/gif" href="icon.gif" />-->

        <!-- UWA Environment -->
        <link rel="stylesheet" type="text/css" href="http://uwa.netvibes.com/lib/c/UWA/assets/css/standalone.css" />
        <script type="text/javascript" src="http://uwa.netvibes.com/lib/c/UWA/js/UWA_Standalone_Alone.js"></script>
        <script type="text/javascript" src="http://uwa.netvibes.com/lib/c/UWA/js/UWA_Controls_Flash.js"></script>
        
        <!-- Widget Preferences -->
        <widget:preferences>
            <preference type="text" name="defInput" label="Default Input" defaultValue="Default Input"/>
        </widget:preferences>

        <!-- Application Styles -->
        <style type="text/css">


        </style>

<script type="text/javascript">
//<![CDATA[

    var TextUtil = {
    	ipText : null,
    	opText : null,
    	chrsz  : 8,

        /**
         * @property {Object} elements - Store all DOM elements.
         */
        elements: {},


        /**
         * Keyboard manager.
         * Map some keyboard key to calculator then
         * trigger click events on the keys.
         * @param {Event} event - keyboard event.
         */
        onKeyPress: function (event) {

        },

        /**
         * Help to know if mouse is over our calculator
         */
        onMouseEnter: function () {
        	TextUtil.mouseIn = true;
        },

        /**
         * Help to know if mouse is over our calculator
         */
        onMouseLeave: function () {
        	TextUtil.mouseIn = false;
        },
        
        swapIpAndOp: function() {
        	if(TextUtil.opText.value != ''){
        		TextUtil.ipText.value = TextUtil.opText.value;
            	TextUtil.opText.value = '';
        	}
        },
        
        urlEncode : function() {
        	TextUtil.opText.value = encodeURIComponent(TextUtil.ipText.value);
        },
        
        urlDecode : function (){
        	TextUtil.opText.value = decodeURIComponent(TextUtil.ipText.value);
        },
        
        base64Encode : function() {
        	TextUtil.opText.value = Base64.encode(TextUtil.ipText.value);
        },
        
        base64Decode : function (){
        	TextUtil.opText.value = Base64.decode(TextUtil.ipText.value);
        },
        
        toLowerCase : function() {
        	TextUtil.opText.value = TextUtil.ipText.value.toLowerCase();
        },
        
        toUpperCase : function (){
        	TextUtil.opText.value = TextUtil.ipText.value.toUpperCase();
        },
        
        asciiToHex : function() {
        	TextUtil.opText.value = Base64.asciiToHex(TextUtil.ipText.value);
        },
        
        hexToAscii : function (){
        	TextUtil.opText.value = Base64.hexToAscii(TextUtil.ipText.value);
        },
        
        htmlEncode : function() {
        	
        },
        
        htmlDecode : function (){
        	
        },
        
        asciiToBin : function() {
        	var str = TextUtil.ipText.value;
        	var bin = Array();
        	var mask = (1 << TextUtil.chrsz) - 1;
        	for(var i = 0; i < str.length * TextUtil.chrsz; i += TextUtil.chrsz){
        		bin[i>>5] |= (str.charCodeAt(i / TextUtil.chrsz) & mask) << (32 - TextUtil.chrsz - i%32);
        	}
        	TextUtil.opText.value = bin;
        },
        
        binToAscii : function() {
        	var bin = TextUtil.ipText.value;
        	var str = "";
        	var mask = (1 << TextUtil.chrsz) - 1;
        	for(var i = 0; i < bin.length * 32; i += TextUtil.chrsz){
        	    str += String.fromCharCode((bin[i>>5] >>> (32 - TextUtil.chrsz - i%32)) & mask);
        	}
        	TextUtil.opText.value = str;
        },
        binb2hex : function (binarray){
	        var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
	        var str = "";
	        for(var i = 0; i < binarray.length * 4; i++)
	        {
	        str += hex_tab.charAt((binarray[i>>2] >> ((3 - i%4)*8+4)) & 0xF) +
	        hex_tab.charAt((binarray[i>>2] >> ((3 - i%4)*8 )) & 0xF);
	        }
	        TextUtil.opText.value = str;
        },

        /**
         * Build the calculator
         */
        onLoad: function () {
            widget.body.setStyle('padding', 10);
            widget.setTitle(UWA.i18n("Text Util"));
            
            start = widget.createElement('div', {
                'class' : 'TextUtil',
                html: [
                       {
                           tag: 'label',
                           text : UWA.i18n("Input Text")+ ': '
                       },
                       {
                           tag: 'input',
                           type : 'text',
                           id : 'ipText',
                           size : '30',
                           value : widget.getValue('defInput')
                       },
                       {
                           tag: 'input',
                           type: 'button',
                           value : UWA.i18n("Swap"),
                           events: {
                               click: TextUtil.swapIpAndOp
                           }
                       },
                       {
                           tag: 'br'
                       },
                       {
                           tag: 'label',
                           text : UWA.i18n("Converted Text")+ ': '
                       },
                       {
                           tag: 'input',
                           type : 'text',
                           id : 'opText',
                           size : '50',
                       },
                       {
                           tag: 'br'
                       },
                       {
                           tag: 'br'
                       },
                       {
                           tag: 'input',
                           type: 'button',
                           value : UWA.i18n("URL Encode"),
                           events: {
                               click: TextUtil.urlEncode
                           }
                       },
                       {
                           tag: 'input',
                           type: 'button',
                           value : UWA.i18n("URL Decode"),
                           events: {
                               click: TextUtil.urlDecode
                           }
                       },
                       {
                           tag: 'input',
                           type: 'button',
                           value : UWA.i18n("Base 64 Encode"),
                           events: {
                               click: TextUtil.base64Encode
                           }
                       },
                       {
                           tag: 'input',
                           type: 'button',
                           value : UWA.i18n("Base 64 Decode"),
                           events: {
                               click: TextUtil.base64Decode
                           }
                       },
                       {
                           tag: 'input',
                           type: 'button',
                           value : UWA.i18n("To Lower Case"),
                           events: {
                               click: TextUtil.toLowerCase
                           }
                       },
                       {
                           tag: 'input',
                           type: 'button',
                           value : UWA.i18n("To Upper Case"),
                           events: {
                               click: TextUtil.toUpperCase
                           }
                       },
                       {
                           tag: 'input',
                           type: 'button',
                           value : UWA.i18n("ASCII to HEX"),
                           events: {
                               click: TextUtil.asciiToHex
                           }
                       },
                       {
                           tag: 'input',
                           type: 'button',
                           value : UWA.i18n("HEX to ASCII"),
                           events: {
                               click: TextUtil.hexToAscii
                           }
                       },
                       {
                           tag: 'input',
                           type: 'button',
                           value : UWA.i18n("HTML Enocde"),
                           events: {
                               click: TextUtil.htmlEncode
                           }
                       },
                       {
                           tag: 'input',
                           type: 'button',
                           value : UWA.i18n("HTML Decode"),
                           events: {
                               click: TextUtil.htmlDecode
                           }
                       },
                       {
                           tag: 'input',
                           type: 'button',
                           value : UWA.i18n("ASCII to BIN"),
                           events: {
                               click: TextUtil.asciiToBin
                           }
                       },
                       {
                           tag: 'input',
                           type: 'button',
                           value : UWA.i18n("BIN to ASCII"),
                           events: {
                               click: TextUtil.binToAscii
                           }
                       }
                   ],
            });
        	
            start.inject(widget.body.empty());
            
            TextUtil.ipText = widget.getElement('#ipText');
            TextUtil.opText = widget.getElement('#opText');

        }
    };
    
    var Base64 = (function() {
        "use strict";

        var _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        
        var symbols = " !\"#$%&'()*+,-./0123456789:;<=>?@";
        var loAZ = "abcdefghijklmnopqrstuvwxyz";
        symbols+= loAZ.toUpperCase();
        symbols+= "[\\]^_`";
        symbols+= loAZ;
        symbols+= "{|}~";

        var _utf8_encode = function (string) {

            var utftext = "", c, n;

            string = string.replace(/\r\n/g,"\n");

            for (n = 0; n < string.length; n++) {

                c = string.charCodeAt(n);

                if (c < 128) {

                    utftext += String.fromCharCode(c);

                } else if((c > 127) && (c < 2048)) {

                    utftext += String.fromCharCode((c >> 6) | 192);
                    utftext += String.fromCharCode((c & 63) | 128);

                } else {

                    utftext += String.fromCharCode((c >> 12) | 224);
                    utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                    utftext += String.fromCharCode((c & 63) | 128);

                }

            }

            return utftext;
        };

        var _utf8_decode = function (utftext) {
            var string = "", i = 0, c = 0, c1 = 0, c2 = 0;

            while ( i < utftext.length ) {

                c = utftext.charCodeAt(i);

                if (c < 128) {

                    string += String.fromCharCode(c);
                    i++;

                } else if((c > 191) && (c < 224)) {

                    c1 = utftext.charCodeAt(i+1);
                    string += String.fromCharCode(((c & 31) << 6) | (c1 & 63));
                    i += 2;

                } else {

                    c1 = utftext.charCodeAt(i+1);
                    c2 = utftext.charCodeAt(i+2);
                    string += String.fromCharCode(((c & 15) << 12) | ((c1 & 63) << 6) | (c2 & 63));
                    i += 3;

                }

            }

            return string;
        };
        

        var _hexEncode = function(input) {
        	var valueStr = input;
            valueStr = valueStr.toLowerCase();
            var hex = "0123456789abcdef";
            var text = "";
            var i=0;
            for( i=0; i<valueStr.length; i=i+2 )
            {
            var char1 = valueStr.charAt(i);
            if ( char1 == ':' )
            {
            i++;
            char1 = valueStr.charAt(i);
            }
            var char2 = valueStr.charAt(i+1);
            var num1 = hex.indexOf(char1);
            var num2 = hex.indexOf(char2);
            var value = num1 << 4;
            value = value | num2;
            var valueInt = parseInt(value);
            var symbolIndex = valueInt - 32;
            var ch = '?';
            if ( symbolIndex >= 0 && value <= 126 )
            {
            ch = symbols.charAt(symbolIndex)
            }
            text += ch;
            }
            return text;
        };

        var _hexDecode = function(input) {
        	var valueStr = input;
            var hexChars = "0123456789abcdef";
            var text = "";
            for( var i=0; i<valueStr.length; i++ )
            {
            var oneChar = valueStr.charAt(i);
            var asciiValue = symbols.indexOf(oneChar) + 32;
            var index1 = asciiValue % 16;
            var index2 = (asciiValue - index1)/16;
            if ( text != "" ) text += ":";
            text += hexChars.charAt(index2);
            text += hexChars.charAt(index1);
            }
            return text;
        };

        var encode = function (input) {
            var output = "", chr1, chr2, chr3, enc1, enc2, enc3, enc4, i = 0;

            input = _utf8_encode(input);

            while (i < input.length) {

                chr1 = input.charCodeAt(i++);
                chr2 = input.charCodeAt(i++);
                chr3 = input.charCodeAt(i++);

                enc1 = chr1 >> 2;
                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
                enc4 = chr3 & 63;

                if (isNaN(chr2)) {
                    enc3 = enc4 = 64;
                } else if (isNaN(chr3)) {
                    enc4 = 64;
                }

                output += _keyStr.charAt(enc1);
                output += _keyStr.charAt(enc2);
                output += _keyStr.charAt(enc3);
                output += _keyStr.charAt(enc4);

            }

            return output;
        };

        var decode = function (input) {
            var output = "", chr1, chr2, chr3, enc1, enc2, enc3, enc4, i = 0;

            input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

            while (i < input.length) {

                enc1 = _keyStr.indexOf(input.charAt(i++));
                enc2 = _keyStr.indexOf(input.charAt(i++));
                enc3 = _keyStr.indexOf(input.charAt(i++));
                enc4 = _keyStr.indexOf(input.charAt(i++));

                chr1 = (enc1 << 2) | (enc2 >> 4);
                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
                chr3 = ((enc3 & 3) << 6) | enc4;

                output += String.fromCharCode(chr1);

                if (enc3 !== 64) {
                    output += String.fromCharCode(chr2);
                }
                if (enc4 !== 64) {
                    output += String.fromCharCode(chr3);
                }

            }

            return _utf8_decode(output);
        };

        var asciiToHex = function(input) {
            return _hexDecode(input);
        };

        var hexToAscii = function(input) {
            return _hexEncode(input);
        };

        return {
            'encode': encode,
            'decode': decode,
            'asciiToHex': asciiToHex,
            'hexToAscii': hexToAscii
        };
    }());

    /**
     * The "onLoad" event is the very first event triggered when
     * the widget is fully loaded or when the preferences are validated.
     * Here, we add Calc.onLoad() function as "onLoad" event
     * listener on the widget.
     */
    widget.addEvents({
        onLoad: TextUtil.onLoad
    });
    
    if (widget.launched) {
    	TextUtil.onLoad();
    }

//]]>
</script>
    </head>
    <body>
        <p>Loading...</p>
    </body>
</html>
